:py:mod:`spann.preprocess`
==========================

.. py:module:: spann.preprocess


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spann.preprocess.SingleCellDataset



Functions
~~~~~~~~~

.. autoapisummary::

   spann.preprocess.batch_scale
   spann.preprocess.anndata_preprocess
   spann.preprocess.generate_dataloaders



.. py:function:: batch_scale(adata, use_rep='X', chunk_size=20000)

   Batch-specific scale data



.. py:function:: anndata_preprocess(adata_spa, adata_rna, highly_variable=2000, spatial_labels=False)

   Preprocess the rna and spatial Anndata
   :adata_spa: AnnData file of spatial dataset, .obs contains 'X','Y', 'source'
   :adata_rna: AnnData file of rna dataset, .obs contains 'cell_type', 'source'
   :highly_variable: number of highly variable genes
   :spatial_labels: if there are ground truth spatial data labels, if True, adata_spa.obs should contains 'cell_type'
   :return: preprocessed AnnData file, adata_cm, adata_rna, adata_spa


.. py:class:: SingleCellDataset(data, labels)


   Bases: :py:obj:`torch.utils.data.Dataset`

   Single cell data torch dataset


   .. py:method:: __len__()


   .. py:method:: __getitem__(idx)



.. py:function:: generate_dataloaders(adata_cm, adata_spa, adata_rna, batch_size=256)

   generate torch datasets and torch dataloaders from preprocessed AnnData files
   :adata_cm: AnnData file of the preprocessed common gene integrated scRNA-seq & spatial data
   :adata_spa: AnnData file of the preprocessed spatial data
   :adata_rna: AnnData file of the preprocessed scRNA-seq data
   :batch_size: batch size of the dataloaders, default=256
   :return: domain specific genes datasets - source_sp_ds,target_sp_ds, train dataloaders - source_cm_dl,target_cm_dl, test dataloaders - test_source_cm_dl,test_target_cm_dl


